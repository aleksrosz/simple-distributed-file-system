// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: proto/filerequest.proto

package file_request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HandleFileRequestsService_SendFileRequest_FullMethodName   = "/fileCommands.HandleFileRequestsService/SendFileRequest"
	HandleFileRequestsService_HandleFileService_FullMethodName = "/fileCommands.HandleFileRequestsService/HandleFileService"
)

// HandleFileRequestsServiceClient is the client API for HandleFileRequestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandleFileRequestsServiceClient interface {
	SendFileRequest(ctx context.Context, in *FileCommand, opts ...grpc.CallOption) (*FileResponse, error)
	HandleFileService(ctx context.Context, in *FileCommand, opts ...grpc.CallOption) (*FileResponse, error)
}

type handleFileRequestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleFileRequestsServiceClient(cc grpc.ClientConnInterface) HandleFileRequestsServiceClient {
	return &handleFileRequestsServiceClient{cc}
}

func (c *handleFileRequestsServiceClient) SendFileRequest(ctx context.Context, in *FileCommand, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, HandleFileRequestsService_SendFileRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleFileRequestsServiceClient) HandleFileService(ctx context.Context, in *FileCommand, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, HandleFileRequestsService_HandleFileService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleFileRequestsServiceServer is the server API for HandleFileRequestsService service.
// All implementations must embed UnimplementedHandleFileRequestsServiceServer
// for forward compatibility
type HandleFileRequestsServiceServer interface {
	SendFileRequest(context.Context, *FileCommand) (*FileResponse, error)
	HandleFileService(context.Context, *FileCommand) (*FileResponse, error)
	mustEmbedUnimplementedHandleFileRequestsServiceServer()
}

// UnimplementedHandleFileRequestsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHandleFileRequestsServiceServer struct {
}

func (UnimplementedHandleFileRequestsServiceServer) SendFileRequest(context.Context, *FileCommand) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileRequest not implemented")
}
func (UnimplementedHandleFileRequestsServiceServer) HandleFileService(context.Context, *FileCommand) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFileService not implemented")
}
func (UnimplementedHandleFileRequestsServiceServer) mustEmbedUnimplementedHandleFileRequestsServiceServer() {
}

// UnsafeHandleFileRequestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandleFileRequestsServiceServer will
// result in compilation errors.
type UnsafeHandleFileRequestsServiceServer interface {
	mustEmbedUnimplementedHandleFileRequestsServiceServer()
}

func RegisterHandleFileRequestsServiceServer(s grpc.ServiceRegistrar, srv HandleFileRequestsServiceServer) {
	s.RegisterService(&HandleFileRequestsService_ServiceDesc, srv)
}

func _HandleFileRequestsService_SendFileRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleFileRequestsServiceServer).SendFileRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleFileRequestsService_SendFileRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleFileRequestsServiceServer).SendFileRequest(ctx, req.(*FileCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleFileRequestsService_HandleFileService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleFileRequestsServiceServer).HandleFileService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleFileRequestsService_HandleFileService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleFileRequestsServiceServer).HandleFileService(ctx, req.(*FileCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// HandleFileRequestsService_ServiceDesc is the grpc.ServiceDesc for HandleFileRequestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandleFileRequestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileCommands.HandleFileRequestsService",
	HandlerType: (*HandleFileRequestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFileRequest",
			Handler:    _HandleFileRequestsService_SendFileRequest_Handler,
		},
		{
			MethodName: "HandleFileService",
			Handler:    _HandleFileRequestsService_HandleFileService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filerequest.proto",
}
